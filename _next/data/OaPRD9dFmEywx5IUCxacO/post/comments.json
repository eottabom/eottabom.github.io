{"pageProps":{"postData":{"id":"comments","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    info: \"info\",\n    p: \"p\",\n    hr: \"hr\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    quote: \"quote\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    note: \"note\",\n    warning: \"warning\",\n    danger: \"danger\",\n    strong: \"strong\",\n    blockquote: \"blockquote\",\n    ol: \"ol\",\n    h4: \"h4\",\n    success: \"success\"\n  }, _provideComponents(), props.components), {BlueText} = _components;\n  if (!BlueText) _missingMdxReference(\"BlueText\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.info, {\n      children: _jsx(_components.p, {\n        children: \"유용한 정보가 있는 주석이 있는 반면, 의미가 없거나 JavaDoc 처럼 의무적으로 작성하는 주석이 혼재한다.\\n어떤 주석을 남겨야 좋은 것인지, 어떤 컨벤션을 가져야 할지 고민하는 시기가 온다.\\nClean Code 관점에서는 주석을 어떻게 남기는 것이 좋은지 정리해보았다.\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"clean-code\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#clean-code\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Clean Code\"]\n    }), \"\\n\", _jsx(_components.quote, {\n      children: _jsx(_components.p, {\n        children: \"로버트 C. 마틴의 Clean Code 의 책 중에서 4장. Comment 에 대한 정리\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"주석은-잘못된-코드를-보완하지-못한다\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#주석은-잘못된-코드를-보완하지-못한다\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"주석은 잘못된 코드를 보완하지 못한다.\"]\n    }), \"\\n\", _jsxs(\"blockquote\", {\n      className: \"custom-quote\",\n      children: [_jsx(\"p\", {\n        children: \"Don't comment bad code - rewrite it.\"\n      }), _jsx(\"footer\", {\n        children: \"by Brian W. Kernighan and P. J. Plaugher\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"코드에 주석을 추가하는 일반적인 이유는 \", _jsx(BlueText, {\n        children: \"코드 품질이 나쁘기 때문이다.\"\n      }), \"\\n깔끔하고 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다.\\n주석으로 설명하려 애쓰는 대신에 그 난장판을 깨끗이 치우는데 시간을 보내라!\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"코드로-의도를-표현하라\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#코드로-의도를-표현하라\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"코드로 의도를 표현하라\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"코드만으로 의도를 표현하기 힘든 경우가 많다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"하지만, 조금만 더 생각해보면 코드로 의도를 표현할 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// AS-IS\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 직원에게 복지 혜택을 받을 자격이 있는지 검사한다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"employee\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"flags \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"&\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"HOURLY_FLAG\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"&&\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"employee\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"age \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"65\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// TO-BE\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"employee\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"isEligibleForFullBenefits\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"good-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#good-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Good Comments\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"1-법적인-주석-legal-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#1-법적인-주석-legal-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"1. 법적인 주석 (Legal Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"회사에서 법적인 이유로 저작권과 같이 특정 주석을 작성하도록 강요하는 경우도 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Copyright (C) 2003,2004,2005 by Object Mentor, Inc. All rights reserved.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Released under the terms of the GNU General Public License version 2 or later.\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"2-정보를-제공하는-주석--informative-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#2-정보를-제공하는-주석--informative-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"2. 정보를 제공하는 주석  (Informative Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"주석을 통해 기본 정보를 제공하는 것은 유용하다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 테스트 중인 Responder 인스턴스를 반환\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"abstract\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Responder\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"responderInstance\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.note, {\n      children: _jsxs(_components.p, {\n        children: [\"사실 이 경우 주석이 유용할 수 있지만, 함수 이름을 \", _jsx(_components.code, {\n          children: \"responderBeingTested\"\n        }), \" 로 바꾸면 주석을 쓰지 않을 수 있다.\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// kk:mm:ss EEE, MMM dd, yyyy 형식이다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Pattern\"\n          }), \" timeMatcher \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Pattern\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compile\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"\\\\\\\\d*:\\\\\\\\d*\\\\\\\\d* \\\\\\\\w*, \\\\\\\\w*, \\\\\\\\d*, \\\\\\\\d*\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.note, {\n      children: _jsxs(_components.p, {\n        children: [\"날짜와 시간의 형식을 바꾸어주는 \", _jsx(_components.code, {\n          children: \"Utils\"\n        }), \" 과 같은 특별한 클래스로 옮긴다면 주석을 쓰지 않을 수 있다.\"]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"3-의도를-설명하는-주석-explanation-of-intent\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#3-의도를-설명하는-주석-explanation-of-intent\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"3. 의도를 설명하는 주석 (Explanation of Intent)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"단순히 구현에 대한 정보를 넘어 숨겨진 의도를 제공한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 스레드를 대량 생성하는 방법으로 어떻게든 경쟁 조건을 만들려 시도한다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2500\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" i\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"++\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"WidgetBuilderThread\"\n          }), \" widgetBuilderThread \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"WidgetBuilderThread\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"widgetBuilder\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" text\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" parent\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" failFlag\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Thread\"\n          }), \" thread \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Thread\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"widgetBuilderThread\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    thread\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"4-설명-clarification\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#4-설명-clarification\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"4. 설명 (Clarification)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"라이브러리 부분이거나 변경할 수 없는 코드에는 주석이 유용할 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.warning, {\n      children: _jsx(_components.p, {\n        children: \"단, 설명이 틀린 경우에는 상당한 위험이 있다.\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"testCompareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"throws\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Exception\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"WikiPagePath\"\n          }), \" a \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"PathParser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"parse\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"PageA\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"WikiPagePath\"\n          }), \" ab \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"PathParser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"parse\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"PageA.PageB\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"WikiPagePath\"\n          }), \" b \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"PathParser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"parse\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"PageB\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"WikiPagePath\"\n          }), \" aa \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"PathParser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"parse\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"PageA.PageA\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"WikiPagePath\"\n          }), \" bb \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"PathParser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"parse\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"PageB.PageB\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"WikiPagePath\"\n          }), \" ba \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"PathParser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"parse\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"PageB.PageA\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"a\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"a\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// a == a\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"a\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"b\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"!=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// a != b\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"ab\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"ab\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// ab == ab\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"a\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"b\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// a < b\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"aa\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"ab\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// aa < ab\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"ba\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"bb\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// ba < bb\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"b\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"a\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// b > a\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"ab\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"aa\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// ab > aa\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"bb\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"ba\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// bb > ba\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"5-결과를-경고하는-주석-warning-of-consequences\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#5-결과를-경고하는-주석-warning-of-consequences\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"5. 결과를 경고하는 주석 (Warning of Consequences)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"특정 결과에 대해 다른 개발자에게 경고하는 주석은 유용하다. 하지만, 문제가 있는 경우에는 해결하는 것이 가장 좋다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 여유 시간이 충분하지 않다면 실행하지 마세요.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"_testWithReallyBigFile\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"writeLinesToFile\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"10000000\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"setBody\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"testFile\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"readyToSend\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" responseString \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" output\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"toString\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertSubString\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Content-Length: 1000000000\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" responseString\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assertTrue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"bytesSent \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1000000000\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.note, {\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Junit\"\n        }), \" 의 경우 \", _jsx(_components.code, {\n          children: \"@Ignore\"\n        }), \" 로 대체할 수 있다.\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"SimpleDateFormat\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"makeStandardHttpDateFormat\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// SimpleDateFormat 는 스레드가 안전하지 않습니다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 따라서, 각 인스턴스를 독립적으로 생성해야 합니다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"SimpleDateFormat\"\n          }), \" df \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"SimpleDateFormat\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"EEE, dd MMM yyyy HH:mm:ss z\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    df\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"setTimeZone\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"TimeZone\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getTimeZone\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"GMT\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" df\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"6-todo-주석-todo-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#6-todo-주석-todo-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"6. TODO 주석 (TODO Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"해야 할 일을 \", _jsx(_components.code, {\n          children: \"//TODO\"\n        }), \" 주석 형식으로 남기는 것은 좋다.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"TODO 주석은 기능이 왜 퇴보적인 구현을 가지고 있는지, 그 기능의 미래가 어떻게 되어야 하는지 설명해야 한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"TODO 는 개발자가 해야 한다고 생각한 작업이지만, 어떠한 이유로 지금은 할 수 없고, 사용하지 않는 기능을 삭제 하라는 알림이 될 수도 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// TODO: 현재 필요하지 않다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 체크 아웃 모델을 도입하면 함수가 필요 없다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"VersionInfo\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"makeVersion\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"throws\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Exception\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"7-강조-amplification\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#7-강조-amplification\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"7. 강조 (Amplification)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"중요성을 강조하기 위해 사용 될 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" listItemContent \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" match\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"group\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"trim\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 여기서 trim은 정말 중요하다. trim 함수는 문자열에서 시작 공백을 제거한다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 문자열에 시작 공백이 있으면 다른 문자열로 인식되기 때문이다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ListItemWidget\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" listItemContent\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"level \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"buildList\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"text\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"substring\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"match\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"end\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"8-공개-api-에서-javadocs-javadocs-in-public-apis\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#8-공개-api-에서-javadocs-javadocs-in-public-apis\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"8. 공개 API 에서 Javadocs (Javadocs in Public APIs)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"잘 설명된 공개 API 만큼 도움이 되고 만족스러운 것은 없다.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"표준 자바 라이버리를 위한 \", _jsx(_components.code, {\n          children: \"Javadocs\"\n        }), \" 가 좋은 예이다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"bad-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#bad-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Bad Comments\"]\n    }), \"\\n\", _jsx(_components.danger, {\n      children: _jsxs(_components.p, {\n        children: [\"대부분의 주석이 이 범주에 속한다. \", _jsx(\"br\", {}), \"\\n보통 잘못된 코드에 대한 변명 또는 불충분한 결정에 대한 정당성 같은 내용이다.\"]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"1-주절거리는-주석-mumbling\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#1-주절거리는-주석-mumbling\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"1. 주절거리는 주석 (Mumbling)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"아래 코드에서 catch 블록에 있는 주석은 저자에게는 의미가 있겠지만, 다른 사람들에게는 의미가 없다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"저 주석의 의미를 알아내려면 다른 코드를 봐야하는데, 이해가 안되어 다른 모듈까지 뒤져야 하는 주석은 제대로 된 주석이 아니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"loadProperties\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"try\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" propertiesPath \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" propertiesLocation \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/\\\"\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"PROPERTIES_FILE\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"FileInputStream\"\n          }), \" propertiesStream \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"FileInputStream\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"propertiesPath\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        loadedProperties\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"load\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"propertiesStream\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"catch\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"IOException\"\n          }), \" e\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 속성 파일이 없다면 기본값을 모두 메모리로 읽어 들였다는 의미다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"2-중복하는-주석-redundant-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#2-중복하는-주석-redundant-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"2. 중복하는 주석 (Redundant Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"코드 내용을 그대로 중복하는 주석은 전혀 필요 없는 코드이다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// this.closed가 true일 때 반환되는 유틸리티 메서드다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 타임아웃에 도달하면 예외를 던진다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"synchronized\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"waitForClose\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"long\"\n          }), \" timeoutMillis\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"throws\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Exception\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"!\"\n          }), \"closed\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"wait\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"timeoutMillis\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"!\"\n          }), \"closed\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"throw\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Exception\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"MockResponseSender could not be closed\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/apache/tomcat/blob/main/java/org/apache/catalina/core/ContainerBase.java\",\n        children: \"Tomcat 코드\"\n      }), \"에서 중복된 Javadocs 는 오히려 주석이 어수선하고 코드를 모호하게 만들며, 문서적인 목적에는 전혀 도움이 되지 않는다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"생략\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/**\\n\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     * The Logger implementation with which this Container is associated.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Log\"\n          }), \" logger \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/**\\n\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     * Associated logger name.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" logName \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/**\\n\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     * The cluster with which this Container is associated.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Cluster\"\n          }), \" cluster \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ReadWriteLock\"\n          }), \" clusterLock \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ReentrantReadWriteLock\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/**\\n\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     * The human-readable name of this Container.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" name \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/**\\n\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     * The parent Container to which this Container is a child.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Container\"\n          }), \" parent \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/**\\n\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     * The parent class loader to be configured when we install a Loader.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"     */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ClassLoader\"\n          }), \" parentClassLoader \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"생략\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"3-오해의-소지가-있는-주석-misleading-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#3-오해의-소지가-있는-주석-misleading-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"3. 오해의 소지가 있는 주석 (Misleading Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"주석에 담긴 \", _jsx(_components.strong, {\n          children: \"살짝 잘못된 정보\"\n        }), \" 를 전달 할 수 있다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"아래의 코드에서는 \", _jsx(_components.code, {\n        children: \"this.closed\"\n      }), \" 가 \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" 로 변화하는 순간 메서드는 반환되지 않는다.\\n\", _jsx(_components.code, {\n        children: \"this.closed\"\n      }), \" 가 \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" 여야 메서드가 반환된다.\\n아니면 무조건 timeout 을 기다렸다가 \", _jsx(_components.code, {\n        children: \"this.closed\"\n      }), \" 가 \", _jsx(_components.code, {\n        children: \"true\"\n      }), \"가 아니면 예외를 던진다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// this.closed가 true일 때 반환되는 유틸리티 메서드다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 타임아웃에 도달하면 예외를 던진다.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"synchronized\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"waitForClose\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"long\"\n          }), \" timeoutMillis\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"throws\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Exception\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"!\"\n          }), \"closed\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"wait\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"timeoutMillis\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"!\"\n          }), \"closed\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"throw\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Exception\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"MockResponseSender could not be closed\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"4-의무적인-주석-mandated-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#4-의무적인-주석-mandated-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"4. 의무적인 주석 (Mandated Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모든 함수에 Javadocs 를 달거나 모든 변수에 주석을 달아야 한다는 규칙은 어리석다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이런 주석은 코드를 복잡하게 만들며, 혼동과 무질서를 초래한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"아래와 같은 주석은 아무런 가치가 없다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/**\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \" *\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsxs(_components.span, {\n            className: \"token doc-comment comment\",\n            children: [\" * \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"@param\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token parameter\",\n              children: \"title\"\n            }), \" CD 제목\\n\"]\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsxs(_components.span, {\n            className: \"token doc-comment comment\",\n            children: [\" * \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"@param\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token parameter\",\n              children: \"author\"\n            }), \" CD 저자\\n\"]\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsxs(_components.span, {\n            className: \"token doc-comment comment\",\n            children: [\" * \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"@param\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token parameter\",\n              children: \"tracks\"\n            }), \" CD 트랙 숫자\\n\"]\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsxs(_components.span, {\n            className: \"token doc-comment comment\",\n            children: [\" * \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"@param\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token parameter\",\n              children: \"durationInMinutes\"\n            }), \" CD 길이(단위: 분)\\n\"]\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \" */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"addCD\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" title\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" author\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" tracks\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" durationInMinutes\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"CD\"\n          }), \" cd \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"CD\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    cd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"title \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" title\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    cd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"author \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" author\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    cd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"tracks \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" tracks\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    cd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"duration \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" durationInMinutes\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    cdList\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"add\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"cd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"5-이력-기록하는-주석-journal-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#5-이력-기록하는-주석-journal-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"5. 이력 기록하는 주석 (Journal Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Git\"\n        }), \" 과 같은 소스 코드 관리 시스템이 있으니 전혀 필요 없다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" 변경 이력 \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"11\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Oct\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2001\"\n          }), \" 부터\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"--\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"11\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Oct\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2001\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" 클래스를 다시 정리하고 새로운 패키징\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"05\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Nov\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2001\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getDescription\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" 메소드 추가\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"6-소음-주석-있으나-마나-한-주석-noise-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#6-소음-주석-있으나-마나-한-주석-noise-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"6. 소음 주석, 있으나 마나 한 주석 (Noise Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"아무런 의미가 없는 주석이고, 오히려 코드를 읽을 때 주석을 그냥 지나치게 된다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"/*\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * 기본 생성자\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \" */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"AnnualDateRule\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/** 월 일 */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" dayOfMonth\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/**\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \" * Returns the day of the month.\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \" *\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsxs(_components.span, {\n            className: \"token doc-comment comment\",\n            children: [\" * \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"@return\"\n            }), \" the day of the month.\\n\"]\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \" */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getDayOfMonth\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" dayOfMonth\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 코드에서 첫 번째 주석이 의미가 있는데, 그냥 지나치게 된다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"startSending\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"try\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"doSending\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"catch\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"SocketException\"\n          }), \" e\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// normal. someone stopped the request.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"catch\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Exception\"\n          }), \" e\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"try\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"add\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ErrorResponder\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"makeExceptionString\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"e\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"closeAll\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"catch\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Exception\"\n          }), \" e1\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"//Give me a break!\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"7-무서운-잡음-scary-noise\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#7-무서운-잡음-scary-noise\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"7. 무서운 잡음 (Scary Noise)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Javadocs 또한 잡음이 될 수 있고, 문서를 제공하고자 하는 잘못된 욕구로 작성된 내용이다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/** The name. */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/** The version. */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" version\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/** The licenceName. */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" licenceName\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/** The version. */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" info\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"8-함수나-변수로-표현할-수-있다면-주석을-달지-마라-dont-use-a-comment-when-you-can-use-a-function-of-a-variable\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#8-함수나-변수로-표현할-수-있다면-주석을-달지-마라-dont-use-a-comment-when-you-can-use-a-function-of-a-variable\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"8. 함수나 변수로 표현할 수 있다면 주석을 달지 마라 (Don't Use a Comment When You Can Use a Function of a Variable)\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// AS-IS\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 전역 목록 smodule 에 속하는 모듈이 우리가 속한 하위 시스템에 의존하는가?\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"module\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getDependSubsystems\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"contains\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"subSysMod\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getSubSystem\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// TO-BE\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ArrayList\"\n          }), \" moduleDependencies \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" smodule\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getDependSubSystems\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" ourSubSystem \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" subSysMod\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getSubSystem\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"moduleDependees\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"contains\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"ourSubSystem\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"9-위치를-표시하는-주석-position-markers\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#9-위치를-표시하는-주석-position-markers\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"9. 위치를 표시하는 주석 (Position Markers)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"가족성만 낮추므로 제거하는 것이 좋다. (특히, 뒷부분 슬래시)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"너무 자주 사용하지 않을 때만 배너는 눈에 띄며 주위를 환기하므로, 반드시 필요할 때 아주 드물게 사용하는 것이 좋다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsx(_components.code, {\n        className: \"language-java code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Actions /////////////////////////////////////////////\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"10-괄호를-닫는-주석-closing-brace-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#10-괄호를-닫는-주석-closing-brace-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"10. 괄호를 닫는 주석 (Closing Brace Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"중첩된 구조를 가진 긴 함수에 대해서는 의미가 있을 수도 있긴 하겠지만, 작고 캡슐화된 함수에서는 잡음일 뿐이다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"괄호를 닫는 주석을 달아야겠다는 생각 대신 함수를 줄이려는 시도를 하자.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" wc \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"main\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" args\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"BufferedReader\"\n          }), \" in \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"BufferedReader\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"InputStreamReader\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"System\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"in\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" line\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" lineCount \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" charCount \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" wordCount \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"try\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"while\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"line \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" in\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"readLine\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"!=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                lineCount\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"++\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                charCount \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+=\"\n          }), \" line\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"length\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" words\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" line\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"split\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"\\\\\\\\W\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                wordCount \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+=\"\n          }), \" words\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"length\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"//while\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"System\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"out\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"println\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"wordCount = \\\"\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" wordCount\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"System\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"out\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"println\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"lineCount = \\\"\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" lineCount\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"System\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"out\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"println\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"charCount = \\\"\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" charCount\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// try\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"catch\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"IOException\"\n          }), \" e\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"System\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"err\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"println\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Error:\\\"\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" e\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getMessage\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"//catch\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"//main\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"11-공로를-돌리거나-저자를-표시하는-주석-attributions-and-bylines\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#11-공로를-돌리거나-저자를-표시하는-주석-attributions-and-bylines\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"11. 공로를 돌리거나 저자를 표시하는 주석 (Attributions and Bylines)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Git\"\n        }), \" 과 같은 소스 코드 제어 시스템으로 대체가 가능하다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsx(_components.code, {\n        className: \"language-java code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"/* Added by Rick */\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"12-주석으로-처리된-코드-commented-out-code\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#12-주석으로-처리된-코드-commented-out-code\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"12. 주석으로 처리된 코드 (Commented-Out Code)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"1960년대에는 주석으로 처리된 코드는 유용했지만, 소스 코드 관리 시스템을 쓰기 때문에 굳이 주석으로 처리할 필요는 없다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"bytePos \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"writeBytes\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"pngIdBytes\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"//hdrPos = bytePos;\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"writeHeader\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"writeResolution\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"//dataPos = bytePos;\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"writeImageData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"wirteEnd\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pngBytes \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"resizeByteArray\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pngBytes\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"maxPos\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"else\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pngBytes \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pngBytes\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"13-html-주석-html-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#13-html-주석-html-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"13. HTML 주석 (HTML Comments)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"소스 코드 주석의 HTML 은 혐오스러운 것이다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"적절한 HTML 로 주석을 장식하는 것은 개발자가 아닌, IDE 나 Javadocs 와 같은 도구의 책임이어야 한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"14-전역-정보-nonlocal-information\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#14-전역-정보-nonlocal-information\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"14. 전역 정보 (Nonlocal Information)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"주석을 달아야 한다면 근처에 있는 코드만 기술하고, 시스템의 전반적인 정보를 기술하지 말라.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"해당 시스템의 코드가 변해도 아래 주석이 변하리라는 보장은 전혀 없다. 그리고 심하게 중복된 주석도 확인하자.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \"/**\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsxs(_components.span, {\n            className: \"token doc-comment comment\",\n            children: [\" * 적합성 테스트가 동작하는 포트: 기본값은 \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"b\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"8082\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"b\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \".\\n\"]\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \" *\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsxs(_components.span, {\n            className: \"token doc-comment comment\",\n            children: [\" * \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"@param\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token parameter\",\n              children: \"fitnessePort\"\n            }), \"\\n\"]\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token doc-comment comment\",\n            children: \" */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"setFitnessePort\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" fitnessePort\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"fitnewssePort \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" fitnessePort\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"15-많은-정보-too-much-information\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#15-많은-정보-too-much-information\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"15. 많은 정보 (Too Much Information)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"아래 주석은 base64 를 인코딩하고 디코딩 할 수 있는지 테스트 하기 위해 설계된 모듈에서 추출한 주석인데, RFC 번호 이외에는 쓸모가 없다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"/*\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    RFC 2045 - Multipurpose Internet Mail Extensions (MIME)\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    Part One: Format of Internet Message Bodies\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    section 6.8. Base64 Content-Transfer-Encoding\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    The encoding process represents 24-bit groups of input bits as output\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    strings of 4 encoded characters. Proceeding from left to right, a\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    24-bit input group is formed by concatenating 3 8-bit input groups.\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    These 24 bits are then treated as 4 concatenated 6-bit groups, each\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    of which is translated into a single digit in the base64 alphabet.\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    When encoding a bit stream via the base64 encoding, the bit stream\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    must be presumed to be ordered with the most-significant-bit first.\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    That is, the first bit in the stream will be the high-order bit in\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    the first 8-bit byte, and the eighth bit will be the low-order bit in\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"    the first 8-bit byte, and so on.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"*/\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"16-모호한-관계-inobvious-connection\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#16-모호한-관계-inobvious-connection\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"16. 모호한 관계 (Inobvious Connection)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"주석과 그것이 묘사하는 코드 사이의 연관성은 명백해야 한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"아래 코드에서 filter byte 란 무엇인가?, +1, *3, +200 인지.. 픽셀이 바이트인지 명확하지 않다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"/*\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * start with an array that is big enough to hold all the pixels\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * (plus filter bytes), and an extra 200 bytes for header info\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \" */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pngBytes \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"byte\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"width \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"height \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"200\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"17-함수-헤더-function-headers\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#17-함수-헤더-function-headers\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"17. 함수 헤더 (Function Headers)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"짧은 함수에는 많은 설명이 필요 하지 않다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"한 가지 작업을 수행하는 작은 함수에 대해 잘 선택된 이름은 일반적으로 주석 보다 낫다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"18-비공개-코드의-javadoc-javadoc-in-nonpulibc-code\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#18-비공개-코드의-javadoc-javadoc-in-nonpulibc-code\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"18. 비공개 코드의 Javadoc (Javadoc in Nonpulibc code)\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"시스템 내부의 클래스와 함수에 대한 Javadoc 페이지를 생성하는 것은 일반적으로 유용하지 않다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"best-practices-for-writing-code-comments\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#best-practices-for-writing-code-comments\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Best practices for writing code comments\"]\n    }), \"\\n\", _jsx(_components.quote, {\n      children: _jsxs(_components.p, {\n        children: [\"stackoverflow blog 에서 소개된 코드 주석 작성 모범 사례를 정리한 내용 \", _jsx(\"a\", {\n          href: \"https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/\",\n          children: \"(보러가기)\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"유명한 MIT 교수인 Hal Abelson 은 아래와 같이 말했다.\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"프로그램은 사람이 읽을 수 있도록 작성되어야 하며, 기계가 실행 할 수 있도록 부수적으로만 작성되어야 합니다\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나쁜 주석은 주석을 전혀 달지 않는 것보다 나쁘다.\\nPeter Vogel 은 아래와 같이 말한다.\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"주석을 작성하고 유지하는 것은 비용이 든다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"컴파일러는 주석을 확인하지 않으므로 주석이 올바른지 확인할 방법이 없다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"반면에, 컴퓨터가 코드 지시대로 정확히 수행하고 있다는 것을 보장 받을 수 있다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://visualstudiomagazine.com/articles/2013/07/26/why-commenting-code-is-still-bad.aspx\",\n          children: \"No Comment: Why Commenting Code Is Still a Bad Idea\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"규칙-1-주석은-코드와-중복되어서는-안됩니다\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-1-주석은-코드와-중복되어서는-안됩니다\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 1. 주석은 코드와 중복되어서는 안됩니다.\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"표준적인-나쁜-예\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#표준적인-나쁜-예\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"표준적인 나쁜 예\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsx(_components.code, {\n        className: \"language-java code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"i \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"         \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Add one to i\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 경우, 어떠한 정보도 추가하지 않으며 유지 관리 비용이 발생한다.\\n모든 코드 줄에 주석을 요구하는 정책은 \", _jsx(_components.code, {\n        children: \"Reddit\"\n      }), \" 에서 조롱되었다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// create a for loop // <-- comment\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// start for loop\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"   \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// round bracket\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// newline\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// type for declaration\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"i   \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// name for declaration\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"   \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// assignment operator for declaration\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), \"   \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// start value for i\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"규칙-2-좋은-주석은-불분명한-코드를-변명하지-않습니다\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-2-좋은-주석은-불분명한-코드를-변명하지-않습니다\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 2. 좋은 주석은 불분명한 코드를 변명하지 않습니다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"주석의 또 다른 오용은 코드에 있어야 할 정보를 제공하는 것이다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"n 이라는 변수 이름을 지정하고, 그 목적을 설명하는 주석을 추가하는 경우보다는\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"더 나은 변수 이름 지정으로 주석의 필요성이 제거 될 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// AS-IS\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Node\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getBestChildNode\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Node\"\n          }), \" node\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Node\"\n          }), \" n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// best child node candidate\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Node\"\n          }), \" node\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" node\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getChildren\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// update n if the current state is better\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"n \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"||\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"utility\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"node\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"utility\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            n \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" node\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// TO-BE\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Node\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getBestChildNode\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Node\"\n          }), \" node\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Node\"\n          }), \" bestNode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Node\"\n          }), \" currentNode\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" node\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getChildren\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"bestNode \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"||\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"utility\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"currentNode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"utility\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"bestNode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            bestNode \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" currentNode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" bestNode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Kernihhan\"\n      }), \" 과 \", _jsx(_components.code, {\n        children: \"Plauger\"\n      }), \" 는 아래와 같이 말한다.\"]\n    }), \"\\n\", _jsxs(\"blockquote\", {\n      className: \"custom-quote\",\n      children: [_jsx(\"p\", {\n        children: \"나쁜 코드에 주석을 달지 말고 다시 작성하라\"\n      }), _jsxs(\"footer\", {\n        children: [\"- \", _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/The_Elements_of_Programming_Style\",\n          children: \"The Elements of Programming Style\"\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"규칙-3-명확한-주석을-작성할-수-없다면-코드에-문제가-있을-수-있습니다\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-3-명확한-주석을-작성할-수-없다면-코드에-문제가-있을-수-있습니다\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 3. 명확한 주석을 작성할 수 없다면 코드에 문제가 있을 수 있습니다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"유닉스 소스 코드에서 가장 악명 높은 주석은 \", _jsx(_components.strong, {\n          children: \"\\\"당신은 이것을 이해할 것으로 예상되지 않습니다\\\"\"\n        }), \" 인데,\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"/*\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * Switch to stack of the new process and set up\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * his segmentation registers.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \" */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"retu\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"rp\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"->\"\n          }), \"p_addr\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"sureg\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"/*\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * If the new process paused because it was\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * swapped out, set the stack level to the last call\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * to savu(u_ssav). This means that the return\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * which is executed immediately after the call to aretu\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * actually returns from the last routine which did\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * the savu.\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * You are not expected to understand this.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \" */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"rp\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"->\"\n          }), \"p_flag\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"&\"\n          }), _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"SSWAP\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    rp\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"->\"\n          }), \"p_flag \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"&\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"~\"\n          }), _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"SSWAP\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"aretu\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"u\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"u_ssav\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"/*\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * The value returned here has many subtle implications.\\n\"\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token comment\",\n            children: \" * See the newproc comments.\\n\"\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \" */\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Dennis Ritchie\"\n      }), \" 는 나중에 \\\"뻔뻔한 도전이라기 보다는 '이건 시험에 나오지 않을 것' 이라는 정신으로\\\" 의도된 것이라고 설명했지만,\\n공동 저자인 \", _jsx(_components.code, {\n        children: \"Ken Thompson\"\n      }), \" 은 이 내용을 이해하지 못하고 일주일 동안 디버깅하고, 결국 코드를 다시 작성했다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/dwmkerr/hacker-laws#kernighans-law\",\n        children: \"Kernighan 의 법칙\"\n      }), \"을 떠올리게 하는데,\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"디버깅은 처음에 코드를 작성하는 것보다 두배나 어렵다. 따라서 코드를 가능한 한 영리하게 작성한다면 정의상 코드를 디버깅할 만큼 똑똑하지 않은 것이다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"설명할 수 있을 만큼 충분히 설명하거나, 더 나은 방법으로 코드를 다시 작성해라.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"규칙-4-주석은-혼란을-야기하는-것이-아니라-혼란을-해소해야-합니다\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-4-주석은-혼란을-야기하는-것이-아니라-혼란을-해소해야-합니다\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 4. 주석은 혼란을 야기하는 것이 아니라 혼란을 해소해야 합니다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"주석이 혼란을 야기 하는 경우 해당 주석을 삭제 해라.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Steven Levy 의 Hackers: Heroes of the Computer Revolution 에 나오는 다음 이야기가 없으면 나쁜 주석에 대한 논의가 완성되지 않을 것이다.\\n최초의 MIT 해커 중 한 명인 Peter Samson 이 작성한 프로그램 중 하나는 숫자 1750이 포함된 명령어 앞에 RIPJSB 라는 주석만 있었고,\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"누군가가 1750 이 표준이라는 것을 알아낼 때까지 그 의미에 대해서 고민했고,\\nRest In Peace Johann Sebastian Bach 의 약어를 썼다.\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"[Peter Samson] was particularly obscure in refusing to add comments to his source code explaining what he was doing at a given time.\\nOne well-distributed program Samson wrote went on for hundreds of assembly-language instructions, with only one comment beside an instruction that contained the number 1750.\\nThe comment was RIPJSB, and people racked their brains about its meaning until someone figured out that 1750 was the year Bach died, and that Samson had written an abbreviation for Rest In Peace Johann Sebastian Bach.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"규칙-5-주석에서-단일-관용어-코드를-설명하세요\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-5-주석에서-단일-관용어-코드를-설명하세요\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 5. 주석에서 단일 관용어 코드를 설명하세요.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/mit-cml/appinventor-sources\",\n          children: \"App Inventor\"\n        }), \" 의 코드에서 보면 다른 사람이 불필요하거나 중복된다고 생각할 수 있는 코드에 주석을 추가하는 것은 좋은 생각이다.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"코드가 필요한 이유를 적어서 다른 사람의 시간과 불안을 절약해라.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Object\"\n          }), \" value \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"JSONTokener\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"jsonString\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"nextValue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Note that JSONTokener.nextValue() may return\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// a value equals() to null.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"value \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"||\"\n          }), \" value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"equals\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단, 초보자를 위한 튜토리얼을 작성하지 않는 한, 일반적인 관용어에 대한 설명은 포함하지 않는 것이 좋다.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"규칙-6-복사된-코드의-원본-소스에-대한-링크를-제공하세요\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-6-복사된-코드의-원본-소스에-대한-링크를-제공하세요\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 6. 복사된 코드의 원본 소스에 대한 링크를 제공하세요.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"온라인에서 찾은 코드를 사용할 때가 있는데, 소스에 대한 참조를 포함하면 다른 개발자가 아래와 같은 전체 맥락을 얻을 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"어떤 문제가 해결되고 있었나요?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"코드를 제공한 사람\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"솔루션이 권장되는 이유\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"댓글 작성자가 어떻게 생각했는지\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"아직도 작동하는지\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"어떻게 개선될 수 있는가\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 코드를 이해하려는 사람은 공식을 검색해야 하는데, 나중에 참조를 찾는 것보다 URL 을 붙여 넣는 것이 훨씬 빠르다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Magical formula taken from a stackoverflow post, reputedly related to\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// human vision perception.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.3\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" red \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.59\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" green \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.11\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" blue\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"단, 이해하지 못하는 코드를 붙여넣어서는 안된다. \", _jsx(\"br\", {}), \"\\n\", _jsx(_components.a, {\n        href: \"https://stackoverflow.blog/2019/11/26/copying-code-from-stack-overflow-you-might-be-spreading-security-vulnerabilities/\",\n        children: \"Copying code from Stack Overflow? You might paste security vulnerabilities, too\"\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"규칙-7-가장-도움이-될-외부-참조-링크를-포함하세요\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-7-가장-도움이-될-외부-참조-링크를-포함하세요\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 7. 가장 도움이 될 외부 참조 링크를 포함하세요.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"표준 및 기타 문서에 대한 링크는 코드에서 해결하는 문제를 이해하는 데 도움이 될 수 있다.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"예제로, 아래의 링크를 따라가면, \", _jsx(_components.code, {\n          children: \"RFC 4180\"\n        }), \" 이 \", _jsx(_components.code, {\n          children: \"RFC 7111\"\n        }), \" 에 의해 업데이트 되었음을 나타낸다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// http://tools.ietf.org/html/rfc4180 suggests that CSV lines\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// should be terminated by CRLF, hence the \\\\r\\\\n.\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"csvStringBuilder\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"append\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"\\\\r\\\\n\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"규칙-8-버그를-수정할-때-주석을-추가하세요\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-8-버그를-수정할-때-주석을-추가하세요\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 8. 버그를 수정할 때 주석을 추가하세요.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"주석은 코드를 처음 작성할 때 뿐만 아니라, 수정시, 특히 버그를 수정할 때에도 추가해야 한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래의 주석은 메서드의 코드를 이해하는데 도움이 될 뿐만 아니라 코드가 여전히 필요한지 여부와 테스트 방법을 결정하는 데도 도움이 된다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// NOTE: At least in Firefox 2, if the user drags outside of the browser window,\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// mouse-move (and even mouse-down) events will not be received until\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// the user drags back inside the window. A workaround for this issue\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// exists in the implementation for onMouseLeave().\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@Override\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"onMouseMove\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Widget\"\n          }), \" sender\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" x\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"int\"\n          }), \" y\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"규칙-9-불완전한-구현을-표시하려면-주석을-사용하세요\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#규칙-9-불완전한-구현을-표시하려면-주석을-사용하세요\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"규칙 9. 불완전한 구현을 표시하려면 주석을 사용하세요.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"알려진 제한 사항이 있음에도 불구하고 코드를 사용해야 하는 경우가 있는데, 코드의 알려진 결함을 공유 하지 않는게 좋겠지만,\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"TODO 주석과 같이 이를 명시적으로 만드는게 좋다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// TODO(hal): We are making the decimal separator be a period,\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// regardless of the locale of the phone. We need to think about\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// how to allow comma as decimal separator, which will require\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// updating number parsing and other places that transform numbers\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// to strings, such as FormatAsDecimal\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"주석이 잘못된 코드를 변명하거나 수정하지 않는다는 점을 알 수 있다. \", _jsx(\"br\", {}), \"\\n다른 유형의 정보를 제공하여 좋은 코드를 보완한다.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"summary\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#summary\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Summary\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Stack Overflow\"\n      }), \" 의 공동 창립자인 \", _jsx(_components.code, {\n        children: \"Jeff Atwood\"\n      }), \" 는 아래와 같이 말한다.\", _jsx(_components.a, {\n        href: \"https://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/\",\n        children: \"Code Tells You How, Comments Tell You Why\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"코드는 방법을 알려주고, 주석은 이유를 알려줍니다\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 규칙을 따르면 시간과 좌절감을 줄일 수 있다.\"\n    }), \"\\n\", _jsx(_components.success, {\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"b\", {\n          children: \" 개인적인 생각 & 정리\"\n        }), \"\\n의무적인 Javadoc 은 없어도 된다. \", _jsx(\"b\", {\n          children: \" (Clean Code Bad Comments 6, 7, 18) \"\n        }), \"\\nAPI 중에서 특수한 경우 (parameter 에 대한 주석이 필요할 때) Javadoc 으로 작성하면 가독성이 좋다.\\n→ (반드시 best practices 를 따를 필요는 없으므로!!)\\n설명이나 정보를 알려주는 주석은 반드시 필요하다. \", _jsx(\"b\", {\n          children: \" (Clean Code Good Comments 2, 3, 4) \"\n        }), \"\\n→ 혼란을 야기하는 내용은 안된다. \", _jsx(\"b\", {\n          children: \" (Best Practices for writing code comments 규칙 4) \"\n        }), \"\\n→ 너무 많은 정보를 담지 않아야 한다. \", _jsx(\"b\", {\n          children: \" (Clean Code Bad Comments 15) \"\n        }), \"\\nTODO 주석은 필요한 경우만 달자. \", _jsx(\"b\", {\n          children: \" (Clean Code Good Comments 6) \"\n        }), \"\\n참고한 코드의 링크를 추가하는 것이 좋다. \", _jsx(\"b\", {\n          children: \" (Best Practices for writing code comments 규칙 6, 7) \"\n        }), \"\\n버그로 인한 수정할 때 주석을 추가 하자. \", _jsx(\"b\", {\n          children: \" (Best Practices for writing code comments 규칙 8) \"\n        }), \"\\n변수 명이나 메서드 명을 명확히 한다면 주석을 작성하는 일이 줄어 들 것 같다...!\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"-reference\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#-reference\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"📚 Reference\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/\",\n          children: \"Best practices for writing code comments(stackoverflow blog)\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://visualstudiomagazine.com/articles/2013/07/26/why-commenting-code-is-still-bad.aspx\",\n          children: \"No Comment: Why Commenting Code Is Still a Bad Idea\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://velog.io/@wisdom-one/%EC%95%84%EC%9D%B4%ED%85%9C-56.-%EA%B3%B5%EA%B0%9C%EB%90%9C-API-%EC%9A%94%EC%86%8C%EC%97%90%EB%8A%94-%ED%95%AD%EC%83%81-%EB%AC%B8%EC%84%9C%ED%99%94-%EC%A3%BC%EC%84%9D%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\",\n          children: \"Effective Java Item 56\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://manerajona.medium.com/7-best-practices-for-java-api-documentation-dc6e7e87d33f\",\n          children: \"7 Best Practices for Java API Documentation\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Clean Code - Comment(주석) 에 대한 가이드","date":"2024-05-30","tags":["Clean Code"],"summary":"Clean Code - About Comment Guide","description":"Clean Code 관점에서의 Comment(주석) 남기는 방법에 대한 가이드"}},"title":"Clean Code - Comment(주석) 에 대한 가이드","date":"2024-05-30","tags":["Clean Code"],"summary":"Clean Code - About Comment Guide","description":"Clean Code 관점에서의 Comment(주석) 남기는 방법에 대한 가이드"}},"__N_SSG":true}