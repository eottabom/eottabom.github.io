{"pageProps":{"postData":{"id":"jpa-determine-entity-is-new","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    info: \"info\",\n    p: \"p\",\n    hr: \"hr\",\n    h3: \"h3\",\n    a: \"a\",\n    span: \"span\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    note: \"note\",\n    strong: \"strong\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    tip: \"tip\",\n    success: \"success\"\n  }, _provideComponents(), props.components), {BlueText, RedText} = _components;\n  if (!BlueText) _missingMdxReference(\"BlueText\", true);\n  if (!RedText) _missingMdxReference(\"RedText\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.info, {\n      children: _jsxs(_components.p, {\n        children: [\"Spring Data JPA 를 사용하다보면 save() 메서드 호출 시 내부적으로 persist() 를 호출할지, merge() 를 호출 할 지 결정하게 된다. \", _jsx(\"br\", {}), \"\\n해당 Entity 가 새로운 Entity 인지 여부에 따라 결정되는데, Spring Data JPA 는 Entity 가 새로운지 어떻게 판단하는지 알아보자.\"]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"신규-entity-판단-방식\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#신규-entity-판단-방식\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"신규 Entity 판단 방식\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Spring Data JPA 는 내부적으로 \", _jsx(_components.code, {\n        children: \"JpaEntityInformation\"\n      }), \" 의 \", _jsx(_components.code, {\n        children: \"isNew(T entity)\"\n      }), \" 메서드를 호출해서 판단한다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@Override\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"boolean\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"isNew\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"T\"\n          }), \" entity\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"versionAttribute\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"isEmpty\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"||\"\n          }), \" versionAttribute\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"map\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Attribute\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"::\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getJavaType\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"map\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Class\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"::\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"isPrimitive\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"orElse\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"false\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"super\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"isNew\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"entity\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"BeanWrapper\"\n          }), \" wrapper \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"DirectFieldAccessFallbackBeanWrapper\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"entity\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" versionAttribute\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"map\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"it \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"->\"\n          }), \" wrapper\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getPropertyValue\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"it\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getName\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"null\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"orElse\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"true\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"@Version\"\n        }), \" 필드가 있다면 → 해당 버전 필드 값이 null 인지 여부로 판단\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"@Version\"\n        }), \" 필드가 없다면 → \", _jsx(_components.code, {\n          children: \"@Id\"\n        }), \" 필드가 null 이거나, primitive 타입일 경우, 0인지 여부로 판단\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.note, {\n      children: _jsxs(_components.p, {\n        children: [\"즉, ID 가 null 이면 \", _jsx(_components.strong, {\n          children: \"신규 Entity 로 간주\"\n        }), \"하여 \", _jsx(_components.strong, {\n          children: \"persist()\"\n        }), \" 가 호출된다.\"]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"직접-id-를-지정한-경우의-동작\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#직접-id-를-지정한-경우의-동작\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"직접 ID 를 지정한 경우의 동작\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ID를 직접 지정하고 \", _jsx(_components.code, {\n        children: \"save()\"\n      }), \" 를 호출하면, JPA 는 해당 Entity 가 기존에 존재한다고 판단하여 merge()를 수행한다. \", _jsx(\"br\", {}), \"\\n이때 실제 Database 에 해당 ID가 존재하지 않으면, \", _jsx(BlueText, {\n        children: \" SELECT 쿼리는 0건을 반환하고 \"\n      }), \" \", _jsx(\"br\", {}), \"\\nJPA 는 병합용 엔티티를 새로 생성하여 INSERT 를 시도하거나, 제약 조건 위반으로 예외가 발생할 수 있다. \", _jsx(\"br\", {}), \"\\n\", _jsx(RedText, {\n        children: \" 결국, 신규 Entity 임에도 JPA 는 기존 데이터처럼 인식하게 되어, 의도치 않은 UPDATE 또는 INSERT 실패로 이어질 수 있다 \"\n      })]\n    }), \"\\n\", _jsx(_components.note, {\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"merge\"\n        }), \" 는 \", _jsx(_components.strong, {\n          children: \"UPDATE\"\n        }), \" 뿐만 아니라, \", _jsx(_components.strong, {\n          children: \"INSERT\"\n        }), \" 도 가능하지만, \", _jsx(\"br\", {}), \"\\n직접 ID 가 지정된 신규 엔티티에는 매우 위험하다.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이를 해결 하기 위한 방법으로는 \", _jsx(_components.code, {\n        children: \"Persistable<T>\"\n      }), \" 인터페이스를 구현하면 된다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// User.class\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@Entity\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@Table\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"name \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"users\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@EntityListeners\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"UserEntityListener\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"User\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"implements\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Persistable\"\n          }), _jsxs(_components.span, {\n            className: \"token generics\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"<\"\n            }), _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"String\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@Id\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" id\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"boolean\"\n          }), \" isNew \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"true\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"protected\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"User\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"User\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" id\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"id \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" id\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"name \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@Override\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getId\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"id\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"setId\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" id\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"id \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" id\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"getName\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@Override\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"boolean\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"isNew\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"isNew\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"setIsNew\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"boolean\"\n          }), \" isNew\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"isNew \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" isNew\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// UserEntityListener.class\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"UserEntityListener\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@PostPersist\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@PostLoad\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"setNotNew\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"User\"\n          }), \" user\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\\t\", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"System\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"out\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"println\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"@PostPersist/@PostLoad called\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\\tuser\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"setIsNew\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"false\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"\\t\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"persist-vs-merge\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#persist-vs-merge\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"persist() vs merge()\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"구분\"\n          }), _jsx(_components.th, {\n            children: \"persist()\"\n          }), _jsx(_components.th, {\n            children: \"merge()\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"동작\"\n          }), _jsx(_components.td, {\n            children: \"새로운 Entity 를 영속성 컨텍스트에 등록\"\n          }), _jsx(_components.td, {\n            children: \"준영속 객체를 병합하여 관리\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"SELECT 쿼리\"\n          }), _jsx(_components.td, {\n            children: \"❌\"\n          }), _jsx(_components.td, {\n            children: \"✅ 먼저 조회 후 merge\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"ID 필요 여부\"\n          }), _jsx(_components.td, {\n            children: \"❌\"\n          }), _jsx(_components.td, {\n            children: \"✅\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"성능\"\n          }), _jsx(_components.td, {\n            children: \"빠름 (직접 INSERT)\"\n          }), _jsx(_components.td, {\n            children: \"느릴수 있다 (SELECT + UPDATE)\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.note, {\n      children: _jsx(_components.p, {\n        children: \"신규 객체를 merge() 로 처리하면 불필요한 SELECT 쿼리가 발생하고 성능 저하 가능성이 존재하게 된다.\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"신규-entity-판단이-중요한-이유는-무엇일까\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#신규-entity-판단이-중요한-이유는-무엇일까\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"신규 Entity 판단이 중요한 이유는 무엇일까?\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Spring Data JPA 의 \", _jsx(_components.code, {\n        children: \"SimpleJpaRepository\"\n      }), \" 는 \", _jsx(_components.code, {\n        children: \"save()\"\n      }), \" 에서 다음과 같이 동작한다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-java\",\n      children: _jsxs(_components.code, {\n        className: \"language-java code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token annotation punctuation\",\n            children: \"@Transactional\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"public\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token generics\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"<\"\n            }), _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"S\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"extends\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"T\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"S\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"save\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"S\"\n          }), \" entity\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"entityInformation\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"isNew\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"entity\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        entityManager\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"persist\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"entity\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// INSERT\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" entity\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"else\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" entityManager\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"merge\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"entity\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// SELECT → UPDATE, 존재하면 UPDATE 없으면 INSERT 가능성 있음\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ID 를 직접 설정했지만, \", _jsx(_components.code, {\n        children: \"isNew()\"\n      }), \" 는 false 가 되어, \", _jsx(_components.code, {\n        children: \"merge()\"\n      }), \" 를 호출하게 되고, \", _jsx(\"br\", {}), \"\\nDatabase 에는 해당 ID 가 존재하지 않지만, 신규 Entity 임에도 불구하고, \", _jsx(_components.code, {\n        children: \"SELECT\"\n      }), \" 후 \", _jsx(_components.code, {\n        children: \"UPDATE\"\n      }), \" 를 하게 되어 (이 때, database 조회) 실패 또는 데이터 무결성 오류가 발생할 수 있고, 비효율적이다.\"]\n    }), \"\\n\", _jsx(_components.note, {\n      children: _jsx(_components.p, {\n        children: \"정확한 isNew() 제어는 성능, 정합성, 쿼리 효율성 측면에서 매우 중요하다.\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"요약\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#요약\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"요약\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"상황\"\n          }), _jsx(_components.th, {\n            children: \"처리방식\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"ID 없거나 null → 신규 Entity\"\n          }), _jsx(_components.td, {\n            children: \"persist()\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"ID가 존재하지만 실제 DB 에는 없음\"\n          }), _jsx(_components.td, {\n            children: \"merge() 호출 → 실패 가능성 / 비효율\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"ID 를 직접 설정한 신규 Entity\"\n          }), _jsx(_components.td, {\n            children: \"Persistable<T> + isNew() 로 명시 필요\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.tip, {\n      children: _jsx(\"a\", {\n        href: \"https://github.com/eottabom/let-me-code/tree/main/src/main/java/com/eottabom/letmecode/example/_01_jpa_entity\",\n        children: \"예제 코드 보러가기 (클릭)\"\n      })\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.success, {\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"b\", {\n          children: \"정리\"\n        }), _jsx(\"br\", {}), \"\\nSpring Data JPA 는 내부적으로 isNew() 를 통해서 신규 Entity 여부를 판단한다. \", _jsx(\"br\", {}), \"\\nID 는 존재하지만 실제 DB 에 없는 경우 SELECT + UPDATE 후 merge 를 하므로 정합성이 떨어질 수 있고, 비효율적이다. \", _jsx(\"br\", {}), \"\\nID 를 직접 설정했을 경우는 Persistable + isNew() 로 명시하는 것이 필요하다. \", _jsx(\"br\", {})]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"-reference\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#-reference\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"📚 Reference\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/support/JpaEntityInformation.html\",\n          children: \"Spring Docs - JpaEntityInformation\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.spring.io/spring-data/jpa/reference/jpa/entity-persistence.html\",\n          children: \"Spring Docs - entity-persistence\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Spring Data JPA - 새로운 Entity 판별","date":"2025-04-30","tags":["Spring","JPA"],"summary":"How does Spring Data JPA Determine if an Entity is New?","description":"Spring Data JPA 에서 Entity 가 새로운 것인지 판단하는 방법에 대해서 알아보자."}},"title":"Spring Data JPA - 새로운 Entity 판별","date":"2025-04-30","tags":["Spring","JPA"],"summary":"How does Spring Data JPA Determine if an Entity is New?","description":"Spring Data JPA 에서 Entity 가 새로운 것인지 판단하는 방법에 대해서 알아보자."}},"__N_SSG":true}